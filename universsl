-- Universal Script with Rayfield UI
-- Load Rayfield Library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create Window
local Window = Rayfield:CreateWindow({
   Name = "Universal Script",
   LoadingTitle = "Universal Script Loading...",
   LoadingSubtitle = "by Replit User",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "UniversalConfig"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false
})

-- Create Player Tab
local PlayerTab = Window:CreateTab("Player", 4483362458)

-- Player Speed Section
local PlayerSection = PlayerTab:CreateSection("Player Movement")

local SpeedSlider = PlayerTab:CreateSlider({
   Name = "Walkspeed",
   Range = {16, 200},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "SpeedSlider",
   Callback = function(Value)
      game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
   end,
})

local JumpSlider = PlayerTab:CreateSlider({
   Name = "Jump Power",
   Range = {50, 300},
   Increment = 1,
   Suffix = "Power",
   CurrentValue = 50,
   Flag = "JumpSlider",
   Callback = function(Value)
      game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
   end,
})

-- Player Toggles
local InfiniteJumpToggle = PlayerTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Flag = "InfiniteJump",
   Callback = function(Value)
      getgenv().InfiniteJump = Value
      if Value then
         game:GetService("UserInputService").JumpRequest:connect(function()
            if getgenv().InfiniteJump then
               game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):ChangeState("Jumping")
            end
         end)
      end
   end,
})

local NoClipToggle = PlayerTab:CreateToggle({
   Name = "Noclip",
   CurrentValue = false,
   Flag = "Noclip",
   Callback = function(Value)
      getgenv().Noclip = Value
      game:GetService("RunService").Stepped:connect(function()
         if getgenv().Noclip then
            for _, part in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
               if part:IsA("BasePart") then
                  part.CanCollide = false
               end
            end
         end
      end)
   end,
})

local FlySpeedSlider = PlayerTab:CreateSlider({
   Name = "Fly Speed",
   Range = {16, 150},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 50,
   Flag = "FlySpeed",
   Callback = function(Value)
      getgenv().FlySpeed = Value
   end,
})

local FlyToggle = PlayerTab:CreateToggle({
   Name = "Enhanced Fly",
   CurrentValue = false,
   Flag = "Fly",
   Callback = function(Value)
      getgenv().Flying = Value
      local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()
      local humanoid = character:WaitForChild("Humanoid")
      local rootPart = character:WaitForChild("HumanoidRootPart")
      
      if Value then
         -- Create BodyVelocity for smooth movement
         local bodyVelocity = Instance.new("BodyVelocity")
         bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
         bodyVelocity.Velocity = Vector3.new(0, 0, 0)
         bodyVelocity.Parent = rootPart
         
         -- Create BodyAngularVelocity for rotation control
         local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
         bodyAngularVelocity.MaxTorque = Vector3.new(0, math.huge, 0)
         bodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
         bodyAngularVelocity.Parent = rootPart
         
         -- Store original values
         local originalPlatformStand = humanoid.PlatformStand
         humanoid.PlatformStand = true
         
         local connection
         connection = game:GetService("RunService").Heartbeat:Connect(function()
            if not getgenv().Flying then
               bodyVelocity:Destroy()
               bodyAngularVelocity:Destroy()
               humanoid.PlatformStand = originalPlatformStand
               connection:Disconnect()
               return
            end
            
            local camera = workspace.CurrentCamera
            local userInputService = game:GetService("UserInputService")
            local flySpeed = getgenv().FlySpeed or 50
            
            -- Get movement input
            local moveVector = Vector3.new(0, 0, 0)
            
            -- Forward/Backward
            if userInputService:IsKeyDown(Enum.KeyCode.W) then
               moveVector = moveVector + camera.CFrame.LookVector
            end
            if userInputService:IsKeyDown(Enum.KeyCode.S) then
               moveVector = moveVector - camera.CFrame.LookVector
            end
            
            -- Left/Right
            if userInputService:IsKeyDown(Enum.KeyCode.A) then
               moveVector = moveVector - camera.CFrame.RightVector
            end
            if userInputService:IsKeyDown(Enum.KeyCode.D) then
               moveVector = moveVector + camera.CFrame.RightVector
            end
            
            -- Up/Down
            if userInputService:IsKeyDown(Enum.KeyCode.Space) then
               moveVector = moveVector + Vector3.new(0, 1, 0)
            end
            if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
               moveVector = moveVector - Vector3.new(0, 1, 0)
            end
            
            -- Apply movement with smooth acceleration
            if moveVector.Magnitude > 0 then
               moveVector = moveVector.Unit * flySpeed
            end
            
            bodyVelocity.Velocity = moveVector
         end)
      else
         -- Reset when fly is disabled
         if character and character:FindFirstChild("Humanoid") then
            humanoid.PlatformStand = false
         end
      end
   end,
})

-- Teleport Section
local TeleportSection = PlayerTab:CreateSection("Teleportation")

local TeleportButton = PlayerTab:CreateButton({
   Name = "Teleport to Spawn",
   Callback = function()
      local player = game.Players.LocalPlayer
      if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
         player.Character.HumanoidRootPart.CFrame = CFrame.new(0, 50, 0)
      end
   end,
})

-- Initialize notification
Rayfield:Notify({
   Title = "Universal Script Loaded",
   Content = "All features are now available!",
   Duration = 3,
   Image = 4483362458,
   Actions = {
      Ignore = {
         Name = "Okay!",
         Callback = function() end
      },
   },
})

print("Universal Script with Rayfield UI loaded successfully!")
