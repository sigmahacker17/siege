local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Config = {
    ESP = {
        Enabled = true,
        BoxESP = true,
        NameESP = true,
        SkeletonESP = true,
        DroneESP = true,
        
        BoxColor = Color3.fromRGB(255, 255, 255),
        NameColor = Color3.fromRGB(255, 255, 255),
        SkeletonColor = Color3.fromRGB(0, 255, 255),
        DroneColor = Color3.fromRGB(255, 0, 255),
        
        BoxThickness = 1,
        SkeletonThickness = 1,
        
        MaxDistance = 500,
        TeamCheck = true,
        
        TextSize = 14,
        TextOutline = true,
        
        RefreshRate = 0.05
    },
    Aimbot = {
        Enabled = false,
        Smoothness = 0.1,
        FOV = 100 -- Default FOV radius in pixels
    },
    GunMisc = {
        NoRecoil = false,
        NoSpread = false,
        InfiniteAmmo = false
    },
    FOVVisualizer = {
        Enabled = false
    }
}

local Window = Rayfield:CreateWindow({
    Name = "Operations Siege Script",
    LoadingTitle = "Operations Siege ESP",
    LoadingSubtitle = "by Rayfield",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "OperationsSiege"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "",
        Subtitle = "",
        Note = "",
        FileName = "",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {""}
    }
})

local ESPTab = Window:CreateTab("ESP", 4483362458)
local CombatTab = Window:CreateTab("Combat", 4483362458)
local GunMiscTab = Window:CreateTab("Gun Misc", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)

local PlayerESP = {}
local DroneESP = {}

local SkeletonConnections = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "LowerTorso"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"}
}

local R15ToR6 = {
    ["Head"] = "Head",
    ["UpperTorso"] = "Torso",
    ["LowerTorso"] = "Torso",
    ["RightUpperArm"] = "Right Arm",
    ["RightLowerArm"] = "Right Arm",
    ["RightHand"] = "Right Arm",
    ["LeftUpperArm"] = "Left Arm",
    ["LeftLowerArm"] = "Left Arm",
    ["LeftHand"] = "Left Arm",
    ["RightUpperLeg"] = "Right Leg",
    ["RightLowerLeg"] = "Right Leg",
    ["RightFoot"] = "Right Leg",
    ["LeftUpperLeg"] = "Left Leg",
    ["LeftLowerLeg"] = "Left Leg",
    ["LeftFoot"] = "Left Leg"
}

local function CreateESP(player)
    local esp = {
        Player = player,
        Connections = {}
    }
    
    esp.Box = Drawing.new("Square")
    esp.Box.Visible = false
    esp.Box.Color = Config.ESP.BoxColor
    esp.Box.Thickness = Config.ESP.BoxThickness
    esp.Box.Filled = false
    esp.Box.Transparency = 1
    
    esp.Name = Drawing.new("Text")
    esp.Name.Visible = false
    esp.Name.Color = Config.ESP.NameColor
    esp.Name.Size = Config.ESP.TextSize
    esp.Name.Center = true
    esp.Name.Outline = Config.ESP.TextOutline
    
    esp.Skeleton = {}
    
    return esp
end

local function CreateDroneESP(drone)
    local esp = {
        Drone = drone,
        Connections = {}
    }

    esp.Box = Drawing.new("Square")
    esp.Box.Visible = false
    esp.Box.Color = Config.ESP.DroneColor
    esp.Box.Thickness = Config.ESP.BoxThickness
    esp.Box.Filled = false
    esp.Box.Transparency = 1
    
    esp.Label = Drawing.new("Text")
    esp.Label.Visible = false
    esp.Label.Color = Config.ESP.DroneColor
    esp.Label.Size = Config.ESP.TextSize
    esp.Label.Center = true
    esp.Label.Outline = Config.ESP.TextOutline
    esp.Label.Text = "Drone"
    
    return esp
end

local function RemoveESP(player)
    local esp = PlayerESP[player]
    if not esp then return end
    
    if esp.Box then esp.Box:Remove() end
    if esp.Name then esp.Name:Remove() end
    
    for _, line in pairs(esp.Skeleton) do
        if line then line:Remove() end
    end

    for _, connection in pairs(esp.Connections) do
        if connection then connection:Disconnect() end
    end
    
    PlayerESP[player] = nil
end

local function RemoveDroneESP(drone)
    local esp = DroneESP[drone]
    if not esp then return end
    
    if esp.Box then esp.Box:Remove() end
    if esp.Label then esp.Label:Remove() end

    for _, connection in pairs(esp.Connections) do
        if connection then connection:Disconnect() end
    end
    
    DroneESP[drone] = nil
end

local function GetLimbPosition(character, limbName)
    local limb = character:FindFirstChild(limbName)
    if not limb then
        limb = character:FindFirstChild(R15ToR6[limbName])
    end
    
    if limb and limb:IsA("BasePart") then
        return limb.Position
    end
    return nil
end

local function UpdatePlayerESP()
    for player, esp in pairs(PlayerESP) do
        if not player or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            RemoveESP(player)
            continue
        end
        
        if Config.ESP.TeamCheck and player.Team == LocalPlayer.Team then
            esp.Box.Visible = false
            esp.Name.Visible = false
            for _, line in pairs(esp.Skeleton) do
                if line then line.Visible = false end
            end
            continue
        end
        
        local character = player.Character
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        local humanoid = character:FindFirstChild("Humanoid")
        
        if not humanoidRootPart or not humanoid then continue end
        
        if humanoid.Health <= 0 then
            esp.Box.Visible = false
            esp.Name.Visible = false
            for _, line in pairs(esp.Skeleton) do
                if line then line.Visible = false end
            end
            continue
        end
        
        local position = humanoidRootPart.Position
        local screenPosition, onScreen = Camera:WorldToViewportPoint(position)
        
        local distance = (Camera.CFrame.Position - position).Magnitude
        if not onScreen or distance > Config.ESP.MaxDistance then
            esp.Box.Visible = false
            esp.Name.Visible = false
            for _, line in pairs(esp.Skeleton) do
                if line then line.Visible = false end
            end
            continue
        end
        
        if Config.ESP.BoxESP and Config.ESP.Enabled then
            local size = character:GetExtentsSize()
            local scaleFactor = 1 / (distance * 0.05)
            scaleFactor = math.clamp(scaleFactor, 0.1, 1)
            
            local boxSize = Vector2.new(
                math.max(10, size.X * scaleFactor),
                math.max(20, size.Y * scaleFactor)
            )
            
            esp.Box.Size = boxSize
            esp.Box.Position = Vector2.new(
                screenPosition.X - boxSize.X / 2,
                screenPosition.Y - boxSize.Y / 2
            )
            esp.Box.Visible = true
        else
            esp.Box.Visible = false
        end
        
        if Config.ESP.NameESP and Config.ESP.Enabled then
            esp.Name.Text = player.Name .. " [" .. math.floor(distance) .. "m]"
            esp.Name.Position = Vector2.new(
                screenPosition.X,
                screenPosition.Y - (esp.Box.Size.Y / 2) - 15
            )
            esp.Name.Visible = true
        else
            esp.Name.Visible = false
        end
        
        if Config.ESP.SkeletonESP and Config.ESP.Enabled then
            for i, connection in ipairs(SkeletonConnections) do
                local startLimb = connection[1]
                local endLimb = connection[2]
                
                local startPos = GetLimbPosition(character, startLimb)
                local endPos = GetLimbPosition(character, endLimb)
                
                if startPos and endPos then
                    local startScreenPos, startOnScreen = Camera:WorldToViewportPoint(startPos)
                    local endScreenPos, endOnScreen = Camera:WorldToViewportPoint(endPos)
                    
                    if not esp.Skeleton[i] then
                        esp.Skeleton[i] = Drawing.new("Line")
                        esp.Skeleton[i].Thickness = Config.ESP.SkeletonThickness
                        esp.Skeleton[i].Color = Config.ESP.SkeletonColor
                        esp.Skeleton[i].Transparency = 1
                    end
                    
                    if startOnScreen and endOnScreen then
                        esp.Skeleton[i].From = Vector2.new(startScreenPos.X, startScreenPos.Y)
                        esp.Skeleton[i].To = Vector2.new(endScreenPos.X, endScreenPos.Y)
                        esp.Skeleton[i].Visible = true
                    else
                        esp.Skeleton[i].Visible = false
                    end
                elseif esp.Skeleton[i] then
                    esp.Skeleton[i].Visible = false
                end
            end
        else
            for _, line in pairs(esp.Skeleton) do
                if line then line.Visible = false end
            end
        end
    end
end

local function FindDrones()
    for drone, esp in pairs(DroneESP) do
        if not drone or not drone:IsDescendantOf(game) then
            RemoveDroneESP(drone)
        end
    end
    
    if Config.ESP.DroneESP and Config.ESP.Enabled then
        for _, obj in pairs(workspace:GetDescendants()) do
            if (obj.Name:lower():find("drone") or obj.Name:lower():find("uav")) and 
               obj:IsA("Model") and 
               not DroneESP[obj] then
                
                local primaryPart = obj.PrimaryPart
                if not primaryPart then
                    for _, part in pairs(obj:GetDescendants()) do
                        if part:IsA("BasePart") then
                            primaryPart = part
                            break
                        end
                    end
                end
                
                if primaryPart then
                    DroneESP[obj] = CreateDroneESP(obj)
                end
            end
        end
    end
end

local function UpdateDroneESP()
    for drone, esp in pairs(DroneESP) do
        if not drone or not drone:IsDescendantOf(game) then
            RemoveDroneESP(drone)
            continue
        end
        
        local primaryPart = drone.PrimaryPart
        if not primaryPart then
            for _, part in pairs(drone:GetDescendants()) do
                if part:IsA("BasePart") then
                    primaryPart = part
                    break
                end
            end
            
            if not primaryPart then
                continue
            end
        end
        
        local position = primaryPart.Position
        local screenPosition, onScreen = Camera:WorldToViewportPoint(position)
        
        local distance = (Camera.CFrame.Position - position).Magnitude
        if not onScreen or distance > Config.ESP.MaxDistance or not Config.ESP.DroneESP then
            esp.Box.Visible = false
            esp.Label.Visible = false
            continue
        end
        
        local size = drone:GetExtentsSize()
        if size.Magnitude < 1 then
            size = Vector3.new(3, 3, 3)
        end
        
        local scaleFactor = 1 / (distance * 0.05)
        scaleFactor = math.clamp(scaleFactor, 0.1, 1)
        
        local boxSize = Vector2.new(
            math.max(10, size.X * scaleFactor),
            math.max(10, size.Y * scaleFactor)
        )
        
        esp.Box.Size = boxSize
        esp.Box.Position = Vector2.new(
            screenPosition.X - boxSize.X / 2,
            screenPosition.Y - boxSize.Y / 2
        )
        esp.Box.Visible = true
        
        esp.Label.Text = "Drone [" .. math.floor(distance) .. "m]"
        esp.Label.Position = Vector2.new(
            screenPosition.X,
            screenPosition.Y - boxSize.Y / 2 - 15
        )
        esp.Label.Visible = true
    end
end

local ESPSection = ESPTab:CreateSection("ESP Options")

local ESPToggle = ESPTab:CreateToggle({
    Name = "ESP Master Toggle",
    CurrentValue = Config.ESP.Enabled,
    Flag = "ESP_Enabled",
    Callback = function(Value)
        Config.ESP.Enabled = Value
    end
})

local BoxESPToggle = ESPTab:CreateToggle({
    Name = "Box ESP",
    CurrentValue = Config.ESP.BoxESP,
    Flag = "ESP_Box",
    Callback = function(Value)
        Config.ESP.BoxESP = Value
    end
})

local NameESPToggle = ESPTab:CreateToggle({
    Name = "Name ESP",
    CurrentValue = Config.ESP.NameESP,
    Flag = "ESP_Name",
    Callback = function(Value)
        Config.ESP.NameESP = Value
    end
})

local SkeletonESPToggle = ESPTab:CreateToggle({
    Name = "Skeleton ESP",
    CurrentValue = Config.ESP.SkeletonESP,
    Flag = "ESP_Skeleton",
    Callback = function(Value)
        Config.ESP.SkeletonESP = Value
    end
})

local DroneESPToggle = ESPTab:CreateToggle({
    Name = "Drone ESP",
    CurrentValue = Config.ESP.DroneESP,
    Flag = "ESP_Drone",
    Callback = function(Value)
        Config.ESP.DroneESP = Value
    end
})

local TeamCheckToggle = ESPTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = Config.ESP.TeamCheck,
    Flag = "ESP_TeamCheck",
    Callback = function(Value)
        Config.ESP.TeamCheck = Value
    end
})

local BoxColorPicker = ESPTab:CreateColorPicker({
    Name = "Box Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "ESP_BoxColor",
    Callback = function(Value)
        Config.ESP.BoxColor = Value
    end
})

local SkeletonColorPicker = ESPTab:CreateColorPicker({
    Name = "Skeleton Color",
    Color = Color3.fromRGB(0, 255, 255),
    Flag = "ESP_SkeletonColor",
    Callback = function(Value)
        Config.ESP.SkeletonColor = Value
    end
})

local DroneColorPicker = ESPTab:CreateColorPicker({
    Name = "Drone Color",
    Color = Color3.fromRGB(255, 0, 255),
    Flag = "ESP_DroneColor",
    Callback = function(Value)
        Config.ESP.DroneColor = Value
    end
})

local ESPDistanceSlider = ESPTab:CreateSlider({
    Name = "ESP Distance",
    Range = {100, 1000},
    Increment = 10,
    CurrentValue = Config.ESP.MaxDistance,
    Flag = "ESP_MaxDistance",
    Callback = function(Value)
        Config.ESP.MaxDistance = Value
    end
})

local CombatSection = CombatTab:CreateSection("Combat Options")

local AimbotToggle = CombatTab:CreateToggle({
    Name = "Aimbot",
    CurrentValue = Config.Aimbot.Enabled,
    Flag = "Aimbot_Enabled",
    Callback = function(Value)
        Config.Aimbot.Enabled = Value
        if fovCircle then
            fovCircle.Visible = Value or Config.FOVVisualizer.Enabled
        end
    end
})

local AimbotSmoothnessSlider = CombatTab:CreateSlider({
    Name = "Aimbot Smoothness",
    Range = {0.01, 0.5},
    Increment = 0.01,
    CurrentValue = Config.Aimbot.Smoothness,
    Flag = "Aimbot_Smoothness",
    Callback = function(Value)
        Config.Aimbot.Smoothness = Value
    end
})

local AimbotFOVSlider = CombatTab:CreateSlider({
    Name = "Aimbot FOV",
    Range = {50, 200},
    Increment = 10,
    CurrentValue = Config.Aimbot.FOV,
    Flag = "Aimbot_FOV",
    Callback = function(Value)
        Config.Aimbot.FOV = Value
        if fovCircle then
            fovCircle.Radius = Value
        end
    end
})

local ShowFOVButton = CombatTab:CreateToggle({
    Name = "Show FOV",
    CurrentValue = Config.FOVVisualizer.Enabled,
    Flag = "FOV_Visualizer",
    Callback = function(Value)
        Config.FOVVisualizer.Enabled = Value
        if fovCircle then
            fovCircle.Visible = Value or Config.Aimbot.Enabled
        end
    end
})

local GunMiscSection = GunMiscTab:CreateSection("Gun Modifications")

local NoRecoilToggle = GunMiscTab:CreateToggle({
    Name = "No Recoil",
    CurrentValue = Config.GunMisc.NoRecoil,
    Flag = "GunMisc_NoRecoil",
    Callback = function(Value)
        Config.GunMisc.NoRecoil = Value
    end
})

local NoSpreadToggle = GunMiscTab:CreateToggle({
    Name = "No Spread",
    CurrentValue = Config.GunMisc.NoSpread,
    Flag = "GunMisc_NoSpread",
    Callback = function(Value)
        Config.GunMisc.NoSpread = Value
    end
})

local InfiniteAmmoToggle = GunMiscTab:CreateToggle({
    Name = "Infinite Ammo",
    CurrentValue = Config.GunMisc.InfiniteAmmo,
    Flag = "GunMisc_InfiniteAmmo",
    Callback = function(Value)
        Config.GunMisc.InfiniteAmmo = Value
    end
})

local SettingsSection = SettingsTab:CreateSection("Settings")

local scriptRunning = true

local DestroyButton = SettingsTab:CreateButton({
    Name = "Destroy GUI",
    Callback = function()
        scriptRunning = false
        
        for player, esp in pairs(PlayerESP) do
            if esp.Box then esp.Box:Remove() end
            if esp.Name then esp.Name:Remove() end
            for _, line in pairs(esp.Skeleton) do
                if line then line:Remove() end
            end
        end
        
        table.clear(PlayerESP)
        
        for drone, esp in pairs(DroneESP) do
            if esp.Box then esp.Box:Remove() end
            if esp.Label then esp.Label:Remove() end
        end
        
        table.clear(DroneESP)
        
        if fovCircle then
            fovCircle:Remove()
        end
        
        for _, connection in pairs(getconnections(RunService.RenderStepped)) do
            connection:Disconnect()
        end
        
        for _, connection in pairs(getconnections(RunService.Heartbeat)) do
            connection:Disconnect()
        end
        
        for _, connection in pairs(getconnections(UserInputService.InputBegan)) do
            connection:Disconnect()
        end
        
        for _, connection in pairs(getconnections(Players.PlayerAdded)) do
            connection:Disconnect()
        end
        
        for _, connection in pairs(getconnections(Players.PlayerRemoving)) do
            connection:Disconnect()
        end
        
        Rayfield:Destroy()
        
        collectgarbage("collect")
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Script Terminated",
            Text = "Operations Siege Script has been terminated",
            Duration = 3
        })
    end
})

local UpdateButton = SettingsTab:CreateButton({
    Name = "Check for Updates",
    Callback = function()
        local success, response = pcall(function()
            return game:HttpGet("https://raw.githubusercontent.com/sigmahacker17/siege/main/sieged")
        end)
        
        if not success then
            print("HTTP Request Failed:", response)
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Update Failed",
                Text = "HTTP Error: " .. tostring(response) .. ". Check URL or internet.",
                Duration = 5
            })
            return
        end

        print("Response Length:", #response)
        if #response == 0 then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Update Failed",
                Text = "Empty response from server. Verify URL.",
                Duration = 5
            })
            return
        end

        local currentVersion = "1.0" -- Define your current version
        local versionMatch = response:match("-- Version: (%d+%.%d+)")
        print("Parsed Version:", versionMatch or "None")

        if versionMatch and versionMatch > currentVersion then
            local successLoad, err = pcall(function()
                loadstring(response)()
            end)
            if successLoad then
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Update Applied",
                    Text = "Script updated to version " .. versionMatch .. ".",
                    Duration = 5
                })
            else
                print("Loadstring Error:", err)
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Update Failed",
                    Text = "Load Error: " .. tostring(err),
                    Duration = 5
                })
            end
        else
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "No Update",
                Text = "Latest version (" .. (versionMatch or currentVersion) .. ") already installed.",
                Duration = 5
            })
        end
    end
})

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        PlayerESP[player] = CreateESP(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        PlayerESP[player] = CreateESP(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    RemoveESP(player)
end)

local function SetupRoundChangeDetection()
    if ReplicatedStorage:FindFirstChild("RoundState") then
        ReplicatedStorage.RoundState.Changed:Connect(function()
            for player, esp in pairs(PlayerESP) do
                if player ~= LocalPlayer then
                    RemoveESP(player)
                    PlayerESP[player] = CreateESP(player)
                end
            end
            
            for drone, esp in pairs(DroneESP) do
                RemoveDroneESP(drone)
            end
            FindDrones()
        end)
    end
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            player.CharacterAdded:Connect(function(character)
                if PlayerESP[player] then
                    RemoveESP(player)
                end
                PlayerESP[player] = CreateESP(player)
                
                character.AncestryChanged:Connect(function(_, parent)
                    if not parent then
                        task.delay(1, function()
                            if not PlayerESP[player] then
                                PlayerESP[player] = CreateESP(player)
                            end
                        end)
                    end
                end)
            end)
        end
    end
    
    spawn(function()
        while wait(5) do
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and not PlayerESP[player] then
                    PlayerESP[player] = CreateESP(player)
                end
            end
            
            FindDrones()
        end
    end)
end

SetupRoundChangeDetection()

local espConnection
do
    local frameTime = 0
    local frameCount = 0
    local framesPerUpdate = math.max(1, math.round(Config.ESP.RefreshRate * 60))

    local success, err = pcall(function()
        espConnection = RunService.RenderStepped:Connect(function(deltaTime)
            if not scriptRunning then
                espConnection:Disconnect()
                return
            end

            frameTime = frameTime + deltaTime
            frameCount = frameCount + 1

            if frameCount >= framesPerUpdate then
                if Config.ESP.Enabled then
                    UpdatePlayerESP()
                    UpdateDroneESP()
                else
                    for _, esp in pairs(PlayerESP) do
                        if esp.Box then esp.Box.Visible = false end
                        if esp.Name then esp.Name.Visible = false end
                        for _, line in pairs(esp.Skeleton) do
                            if line then line.Visible = false end
                        end
                    end
                
                    for _, esp in pairs(DroneESP) do
                        if esp.Box then esp.Box.Visible = false end
                        if esp.Label then esp.Label.Visible = false end
                    end
                end
                frameCount = 0
                frameTime = 0
            end
        end)
    end)

    if not success then
        warn("RenderStepped connection failed, falling back to wait loop: " .. err)
        spawn(function()
            while scriptRunning do
                if Config.ESP.Enabled then
                    UpdatePlayerESP()
                    UpdateDroneESP()
                else
                    for _, esp in pairs(PlayerESP) do
                        if esp.Box then esp.Box.Visible = false end
                        if esp.Name then esp.Name.Visible = false end
                        for _, line in pairs(esp.Skeleton) do
                            if line then line.Visible = false end
                        end
                    end
                
                    for _, esp in pairs(DroneESP) do
                        if esp.Box then esp.Box.Visible = false end
                        if esp.Label then esp.Label.Visible = false end
                    end
                end
                wait(Config.ESP.RefreshRate)
            end
        end)
    end
end

local function GetNearestTarget()
    local nearestTarget = nil
    local shortestDistance = math.huge
    local mousePos = UserInputService:GetMouseLocation()

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") and (not Config.ESP.TeamCheck or player.Team ~= LocalPlayer.Team) then
            local head = player.Character.Head
            local screenPoint, onScreen = Camera:WorldToViewportPoint(head.Position)
            local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(mousePos.X, mousePos.Y)).Magnitude

            if onScreen and distance <= Config.ESP.MaxDistance and distance < shortestDistance and distance <= Config.Aimbot.FOV then
                shortestDistance = distance
                nearestTarget = head
            end
        end
    end

    return nearestTarget
end

local aimbotConnection
do
    local success, err = pcall(function()
        aimbotConnection = RunService.RenderStepped:Connect(function()
            if Config.Aimbot.Enabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
                local target = GetNearestTarget()
                if target and target.Parent then
                    local targetPosition = target.Position
                    local direction = (targetPosition - Camera.CFrame.Position).Unit
                    local newCFrame = CFrame.new(Camera.CFrame.Position, targetPosition)

                    Camera.CFrame = Camera.CFrame:Lerp(newCFrame, Config.Aimbot.Smoothness)
                end
            end
        end)
    end)

    if not success then
        warn("Aimbot connection failed: " .. err)
    end
end

-- Aimbot FOV Visualizer
local fovCircle = Drawing.new("Circle")
fovCircle.Visible = false
fovCircle.Color = Color3.fromRGB(255, 0, 0) -- Red circle
fovCircle.Transparency = 0.5
fovCircle.Thickness = 1
fovCircle.NumSides = 32 -- Smooth circle
fovCircle.Radius = Config.Aimbot.FOV
fovCircle.Filled = false

RunService.RenderStepped:Connect(function()
    if (Config.Aimbot.Enabled or Config.FOVVisualizer.Enabled) then
        local mousePos = UserInputService:GetMouseLocation()
        fovCircle.Position = Vector2.new(mousePos.X, mousePos.Y)
        fovCircle.Radius = Config.Aimbot.FOV
        fovCircle.Visible = true
    else
        fovCircle.Visible = false
    end
end)

-- Gun Misc Implementation
local function ApplyGunMods()
    local character = LocalPlayer.Character
    if not character then
        print("No character found")
        return
    end

    local humanoid = character:FindFirstChild("Humanoid")
    if not humanoid then
        print("No humanoid found")
        return
    end

    local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
    if not tool then
        print("No tool equipped")
        return
    end

    print("Tool found:", tool.Name)
    for _, child in pairs(tool:GetChildren()) do
        print("Tool child:", child.Name, child.ClassName)
    end

    if Config.GunMisc.NoRecoil then
        local recoilValue = tool:FindFirstChild("Recoil") or tool:FindFirstChild("RecoilAmount")
        if recoilValue and recoilValue:IsA("NumberValue") then
            recoilValue.Value = 0
            print("No Recoil applied to:", recoilValue.Name)
        else
            print("No Recoil value found in tool")
        end
    end

    if Config.GunMisc.NoSpread then
        local spreadValue = tool:FindFirstChild("Spread") or tool:FindFirstChild("Accuracy")
        if spreadValue and spreadValue:IsA("NumberValue") then
            spreadValue.Value = 0
            print("No Spread applied to:", spreadValue.Name)
        elseif tool:FindFirstChild("Shoot") then
            local oldShoot = tool.Shoot
            tool.Shoot = function(...)
                local args = {...}
                args[2] = Camera.CFrame.LookVector
                return oldShoot(unpack(args))
            end
            print("No Spread hooked to Shoot function")
        else
            print("No Spread value or Shoot function found")
        end
    end

    if Config.GunMisc.InfiniteAmmo then
        local ammoValue = tool:FindFirstChild("Ammo") or tool:FindFirstChild("Ammunition")
        if ammoValue and ammoValue:IsA("IntValue") then
            ammoValue.Changed:Connect(function()
                ammoValue.Value = math.huge
            end)
            print("Infinite Ammo applied to:", ammoValue.Name)
        else
            print("No Ammo value found in tool")
        end
    end
end

RunService.RenderStepped:Connect(function()
    if Config.GunMisc.NoRecoil or Config.GunMisc.NoSpread or Config.GunMisc.InfiniteAmmo then
        ApplyGunMods()
    end
end)

spawn(function()
    while scriptRunning and wait(3) do
        if Config.ESP.DroneESP and Config.ESP.Enabled then
            FindDrones()
        end
    end
end)

spawn(function()
    while scriptRunning and wait(5) do
        for player, esp in pairs(PlayerESP) do
            if not player or not player:IsDescendantOf(game) then
                RemoveESP(player)
            end
        end
        
        collectgarbage("collect")
    end
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.K then
        Rayfield:Toggle()
    end
end)

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Script Loaded",
    Text = "Operations Siege Script - Press K to toggle GUI",
    Duration = 5
})

print("Operations Siege Script loaded successfully!")
Rayfield:LoadConfiguration()
